Java 8 Functional streams
I/O handling


Refer to <streams> : diagrams
collections vs streams n streams basics


Refer to "streams_sequence"

Solve for more practice : 

3.1  Display all student names of a particular category , exceeding specific price.
I/P category name & price.


3.2  Prompt user for category n discount.
Apply that discount on all students of specified category n print it.
i/p : category n discount

3.3 Continue with your student based scenario.
(copy from ready code - "day9-data\ready code")
1. Display all student details from a student list

2. Display all student details(list) sorted as per GPA 
Use custom ordering

3. Remove all failed students 
(gpa < 6 => failure)

3. Write a tester to print average of  gpa of students for the specified course/subject

4 Print name of specified subject  topper

5 Print no of  failures for the specified subject chosen  from user.
(gpa < 6 : failed case)

6. Display all student details from a student map

Regarding Optional(It's considered as a better practice than checking the null value)

java.util.Optional<T> : generic class .
Represents a holder , which may or may not contain the value.
How to check ?
public boolean isPresent()
Rets false in case of empty Optional , o.w rets true

public T get() 
Rets the value of present o.w throws : NoSuchElementException

Enter I/O 

Enter I/O(Input / Output)

Java supports handling of different devices
eg : Keyboard(System.in), Console(System.out), File(text file n bin files) ,networking Sockets(end point of communication in distributed computing) , Pipes(virtual data pipe existing between multiple threads)
.....

I/O Streams
Stream : represents data transfer to/fro Java app n device
Input stream : Reads data from device --> Java App
Output stream : Writes data from Java App --> device

The packages used for handling devices in Java : java.io, java.nio

java.io : In case of any errs in read/write operation ---JVM throws : java.io.IOException
(checked exc)

read/write methods :blocking or non blocking ? : Represnts blocking API
Meaning : It causes the blocking of invoker thread , until read/write operation is complete.

Inheritance hierarchy of classes in java.io
refer : to a diagram

Java 8 Streams(Functional streams ) : represents pipeline of big data ops(aggregate ops) to be perfromed on seq. of elems derived from : arrays / collection /file....
eg : java.util.stream.Stream<T>,IntStream,LongStream,DoubleStream
eg of higher order funs : intermediate ops --filter,map,mapToDouble,sorted,flatMap
forEach,collect,count,sum,average : terminal ops
eg : empList.stream().filter(e.getDept() == dept) .count() --> no of emps from a specific dept

I/O Stream -- represent data transfer (bytes/chars) from/to java app to/from device(eg : file , pipe,socket,memory,console...)
For  reading data from data src into java  app : input stream
For  writing data to data sink from java  app :output stream

java.io --2 types of strms
1. Binary strms
2. char strms

Name 4 abstract super classes in I/O hierarchy :  InputStream,OutputStream,Reader,Writer

Node streams : device handling strms
File Handling strms : FIS,FOS,FR,FW
Buffering strms : BIS,BOS,BR,BW(PW)

Objective : 
1. Text files 
1.1 copy text files using buffer.
i/p : src n dest file names

API
1. FileReader Constructor 
FileReader(String fileName) throws FileNotFoundException

2. BufferedReader Constructor
BufferedReader(Reader r)
BufferedReader(Reader r,int size)

To chain the I/O streams for reading text data , in a buffered manner :
BufferedReader br=new BufferedReader(new FileReader(fileName));

Create a chain of resources to read text data from a pipe in a buffered manner :
BufferedReader br=new BufferedReader(new PipedReader());

Methods of BR 
Imperative Style
1. public String readLine() throws IOException
Tries to read next line of data from the buffer.
Returns null at the end of stream (buffer) condition.


OR use FP(declarative)

2. public Stream<String> lines()
Returns a Stream, the elements of which are lines read from this BufferedReader.

Solve --
Display contents of the text file on the console
lines with length > 40
upper case the contents n display it.
eg : br.lines() 
.filter(s -> s.length()> 40) 
.map(s -> s.toUpperCase())
.forEach(s -> sop(s));



API 
1. FileWriter constructor
FileWriter(String fileName) throws IOException
It will create a new file if none exists or overwrites the existing file.

2. FileWriter constructor
FileWriter(String fileName,boolean append) throws IOException
It will create a new file if none exists or appends to existing file if append=true

3. PrintWriter constructor
PrintWriter(Writer w)
Creates a new Printwriter , with a default size buffer.

4. Methods of PrintWriter
print , println , printf methods
(similar to java.io.PrintStream)

1.2 Suppose you have student details in a map. Can you store these details sorted as per name in a text file , in a buffered manner ?
Lab work


2. Enter Binary file handling streams 
2.1 Node streams -- FileInputStream , FileOutputStream
2.2 Buffering of bin data : BufferedInputStream(InputStream in) , BufferedOutputStream(OutputStream out)
Has similar constructors as earlier.


2.3 Integration of Collection + I/O
Store student details (Map) in the bin file
Restore the student details in to Map from bin file


Steps
1. Get populated list of students --store these details in a bin file , using bin streams

1.1 Core classes  : student , Category 

1.2 custom exc

1.3 ShopUtils --collection utils --
populate list
populate map


1.4 IOUtils -- i/f
add a static method --to store the  students in a bin file       


1.5 Tester : StorestudentDetails --
Accept name of file from user n call our own API

2. Restore the student details from a bin file ---> Java App (Map)

















