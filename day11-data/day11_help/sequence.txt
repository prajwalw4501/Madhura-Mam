Revise 
I/O
Continue with binary streams
Serialization & de-serialization
Enter Multi threading
Process vs Threads
Thread state transitions
Threads API
----------------------

1. Revision
I/O -- File Handling

Read data from text file in buffered manner ---filter the lines containing keyword "java" n copy these lines in the dest file , in buffered manner.

eg : try(Scanner sc=....;
//Java App <--- BR <--- FR (text file)
BR br=new BR(new FR(srcFileName));
//Java App ---> PW --> FW (dest file )
 PW pw=new PW(new FW(destFile)))
{
    br.lines() //Stream<String> : all lines
    .filter(line -> line.contains("java")) // filtered lines
    .forEach(s -> pw.println(s));
}catch(Exception e)
{
  e.printStackTrace();
}


2. Enter Binary file handling streams 
2.1 Node streams -- FileInputStream , FileOutputStream
2.2 Buffering of bin data : BufferedInputStream(InputStream in) , BufferedOutputStream(OutputStream out)
Has similar constructors as earlier.


2.3 Integration of Collection + I/O
Store student details (Map) in the bin file
Restore the student details in to Map from bin file


Steps
1. Get populated map of students --store these details in a bin file , using bin streams

1.1 Core classes  : student , Subject . address

1.2 custom exc

1.3 Student Collection Utils --collection utils --
populate list
populate map


1.4 IOUtils -- i/f
add a static method --to store the  students in a bin file       
eg : static void storeStudentDetails(String fileName,Stream<Student> students) throws ...
{
 //Java App ---> BOS --> FOS (bin file name)
   try (BOS out=new BOS(new FOS(fileName))) {
	//BOS : methods ---write(int) ,write(byte[]), write(byte[],offset,len)
   }
}


BOS : API
write methods
1. to write a byte
OR
write byte[]

Problem -- In above example , if you use BOS(BufferedOutputStream) then a prog has to convert student details --> binary (extremely  complex task !!!!)

Soln -- Use conversion streams
1. java.io.DataOutputStream : class (bin o/p stream)
implements DataOutput (i/f)
Job - to convert java primitive types n Strings --> bianry
Ctor -- DataOutputStream(OutputStream out)
Method --
public void writeInt(int i) throws IOException
public void writeDouble(double i) throws IOException
public void writeLong(long i) throws IOException
......+
public void writeUTF(String s) throws IOException
(Internally uses modified UTF 8 convention)

eg : Create chain of i/o streams to write the student details in a bin file, in a pure bin format , using --conversion n buffering.

Java App--->DOS---> BOS--> FOS--->Bin File

eg : out.writeDouble(s.getGPA());


For restoring the details in bin format , using the conversion stream
2. java.io.DataInputStream : class (bin i/p stream) implements DataInput i/f
Job - to convert bianry ---> prim types or strings 
Ctor -- DataInputStream(InputStream in)
Method --
public int readInt() throws IOException
public double readDouble() throws IOException
public long readLong() throws IOException
......+
public String readUTF() throws IOException

Chain of i/o streams to restore the details
Java App <-------DIS<------ BIS<----FIS<---- Bin File
eg : DIS in=new DIS(new BIS(new FIS(fileName)));
double gpa=in.readDouble();
.......

Problem --
In above example , prog STILL has to convert student state (eg : roll no ,name, gpa,address...) to binary by calling the methods(writeInt , writeUTF , writeDouble....) n later has to call readInt,readUTF,readDouble....

Instead use most advanced conversion streams in binary  -- Object Streams
(to  perform serialization n de-serialization)


1. ObjectOutputStream : class extends OutputStream
implements --DataOutput,ObjectOutput (i/fs)
Job :  Performs serialization
serialization = conversion of object(i.e -state of the object
state = non static n non transient data members) --> binary
Ctor --ObjectOutputStream(OutputStream out)
Methods 
public void writeInt(int i) throws IOException
public void writeDouble(double i) throws IOException
public void writeLong(long i) throws IOException
......+
public void writeUTF(String s) throws IOException
+ 
public void writeObject(Object o) throws IOException
(serialization)

eg : Create chain of i/o streams to store student details(map based) into bin file using ser.(Serialization)

Java App --->OOS(ser.) --> serialized bin stream --->BOS(optional) -->FOS                Bin File

What happens during ser. ?
JVM checks the serializability of ENTIRE object graph (eg : out.writeObject(map))
If it comes across ANY non serializable node , it aborts the conversion(ser) by throwing -java.io.NotSerilizableException
otherwise contines with the conversion

How to make objects serializable ?
The class of the object (eg : student) MUST implement --java.io.Serializable i/f

Serializable i/f -marker i/f (or tag i/f => meaning empty i/f -no methods n no data members)

Role of Serializable i/f -- To provide run time marker to the JVM to allow the conversion.

For De-serialization -
(De-Serialization =restoring / reconstructing entire obj graph in mem)

class : ObjectInputStream --extends InputStream
implements DataInput , ObjectInput

Ctor - ObjectInputStream(InputStream in)
Methods -
public int readInt() throws IOException
public double readDouble() throws IOException
public long readLong() throws IOException
......+
public String readUTF() throws IOException
+ 
public Object readObject() throws ClassNotFoundException, InvalidClassException, IOException
(de-ser.)

1.5 Tester : ReStorestudentDetails --
Accept name of file from user n call our own API

2. Restore the student details from a bin file ---> Java App (Map)
eg : chain of I/O streams
Java App <----OIS(de-ser)<----BIS(optional)  <---- FIS(bin file)


Pre requisites for de-serialization
1. state : available from bin file
2. behavior i.e classes(.class files of UDTs) to load java classes in method area.

(Refer :serialization_in_detail.txt) for complete details.


How does JVM check the serializability of the entire object graph?
Using Java Reflection API (java.lang.Class, java.lang.reflect ) , JVM can find out COMPLETE details of loaded objects , including the i/fs implemented.(to be discussed in future!)


Let's Confirm the  pre requisites of the de-serialization
1.state -- bin .ser file
2. behavior -- .class files (user defined classes) ---
what's best possible way to share these dependencies with de-ser ?
using JAR file.
If JVM's class loader can't find these classes (in the run time classpath) -- throws 
java.lang.ClassNotFoundExc : checked exc
2.5 transient keyword


3.During ser --student.java --student.class --students.ser is created 
Prog modifies --student.java --student.class
de -ser -- .ser file + modified student.class

What will happen during de-serial?
JVM will throw : java.io.InvalidClassException

How JVM detects this incompatibility ?
Based upon SerailVerUID
JVM during ser. computes SerialVerUID n stores it in the bin strm. It's computed based upon class structure.
During de-ser , JVM computes this SerialVerUID , based upon .class files , available in the classpath. Then tries to match this computed(local) SerialVerUID , with the one in the bin file. If it matches --continues with conversion (de-ser) 
o.w throws java.io.InvalidClassException

Enter Multi threading in Java : 

1. Multitasking :
Multi processing vs multi threading
(Process based vs Thread based) 
Refer to a diagram

2. Thread state transitions
Does Not Exist ,NEW,Runnable(Ready-to-run n Running),Blocked
, Dead

3. Thread related API
3.1 Different ways of creating threads
extends Thread 
implements Runnable
OR
Executor framework

4. Thread class methods
start,sleep,run,join,interrupt

5. Write a multi threaded app , to test the concurrency(i.e concurrent execution of threads)
5.1 extends Thread 
5.2 implements Runnable

5.3 When does JVM (Java app) terminate ?
When all non daemon threads(user threads) have completed the exec.
Only daemon thread curntly in the system : GC

6. More Threads API
join 
join(msec)
interrupt

7 Applying threads -
Create a multi threaded app to solve these objective in a parallel manner
1. Accept range of nos from user : main
2. print all even nos : even_printer thrd
3. print all odd nos : odd_printer
4. print average of the range supplied : averager thrd

In the combined lab (if time permits today or tomorrow )
Refer - "day11-data\day11_help\ready code for streams"
Method Reference
Lazy evaluation of streams
Exec order of streams 
Store the names of the students in a separate list
Store the test scores of the students in a separate list
Print the average of  the test scores of the students 
